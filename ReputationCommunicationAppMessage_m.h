//
// Generated file, do not edit! Created by nedtool 5.6 from veins/modules/application/ReputationCommunication/ReputationCommunicationAppMessage.msg.
//

#ifndef __VEINS_REPUTATIONCOMMUNICATIONAPPMESSAGE_M_H
#define __VEINS_REPUTATIONCOMMUNICATIONAPPMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif


namespace veins {

class ReputationCommunicationAppMessage;
} // namespace veins

#include "veins/base/utils/Coord_m.h" // import veins.base.utils.Coord

#include "veins/modules/messages/BaseFrame1609_4_m.h" // import veins.modules.messages.BaseFrame1609_4

#include "veins/base/utils/SimpleAddress_m.h" // import veins.base.utils.SimpleAddress


namespace veins {

/**
 * Class generated from <tt>veins/modules/application/ReputationCommunication/ReputationCommunicationAppMessage.msg:35</tt> by nedtool.
 * <pre>
 * packet ReputationCommunicationAppMessage extends BaseFrame1609_4
 * {
 *     string demoData;
 *     LAddress::L2Type senderAddress = -1;
 *     int serial = 0;
 *     double reputationValue;  // Added field for reputation value
 *     string signature;
 *     string location;
 *     Coord senderPosition;
 *     string certificate;
 *     string caPublicKey;
 * }
 * </pre>
 */
class VEINS_API ReputationCommunicationAppMessage : public ::veins::BaseFrame1609_4
{
  protected:
    omnetpp::opp_string demoData;
    LAddress::L2Type senderAddress = -1;
    int serial = 0;
    double reputationValue = 0;
    omnetpp::opp_string signature;
    omnetpp::opp_string location;
    Coord senderPosition;
    omnetpp::opp_string certificate;
    omnetpp::opp_string caPublicKey;

  private:
    void copy(const ReputationCommunicationAppMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ReputationCommunicationAppMessage&);

  public:
    ReputationCommunicationAppMessage(const char *name=nullptr, short kind=0);
    ReputationCommunicationAppMessage(const ReputationCommunicationAppMessage& other);
    virtual ~ReputationCommunicationAppMessage();
    ReputationCommunicationAppMessage& operator=(const ReputationCommunicationAppMessage& other);
    virtual ReputationCommunicationAppMessage *dup() const override {return new ReputationCommunicationAppMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getDemoData() const;
    virtual void setDemoData(const char * demoData);
    virtual const LAddress::L2Type& getSenderAddress() const;
    virtual LAddress::L2Type& getSenderAddressForUpdate() { return const_cast<LAddress::L2Type&>(const_cast<ReputationCommunicationAppMessage*>(this)->getSenderAddress());}
    virtual void setSenderAddress(const LAddress::L2Type& senderAddress);
    virtual int getSerial() const;
    virtual void setSerial(int serial);
    virtual double getReputationValue() const;
    virtual void setReputationValue(double reputationValue);
    virtual const char * getSignature() const;
    virtual void setSignature(const char * signature);
    virtual const char * getLocation() const;
    virtual void setLocation(const char * location);
    virtual const Coord& getSenderPosition() const;
    virtual Coord& getSenderPositionForUpdate() { return const_cast<Coord&>(const_cast<ReputationCommunicationAppMessage*>(this)->getSenderPosition());}
    virtual void setSenderPosition(const Coord& senderPosition);
    virtual const char * getCertificate() const;
    virtual void setCertificate(const char * certificate);
    virtual const char * getCaPublicKey() const;
    virtual void setCaPublicKey(const char * caPublicKey);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ReputationCommunicationAppMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ReputationCommunicationAppMessage& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_REPUTATIONCOMMUNICATIONAPPMESSAGE_M_H

